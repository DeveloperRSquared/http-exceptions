name: Build
on:
  pull_request:
    branches:
      - main

defaults:
  run:
    shell: bash
    working-directory: src

env:
  DOCKER_IMAGE: http-exceptions

jobs:
  setup:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9']
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # if [ -f requirements.dev.txt ]; then pip install -r requirements.dev.txt; fi

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Run tests
        run: pytest -c pyproject.toml

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Build
        run: docker build --tag ${DOCKER_IMAGE} .

      - name: Check import sort (isort)
        run: docker run --rm --volume $(pwd)/pyproject.toml:/app/pyproject.toml --env CI=true --entrypoint python ${DOCKER_IMAGE} -m isort --settings-file /app/pyproject.toml --check .

      - name: Check unused imports & variables (autoflake)
        run: docker run --rm --env CI=true --entrypoint python ${DOCKER_IMAGE} -m autoflake --check --in-place --remove-unused-variable --remove-all-unused-imports --expand-star-imports --ignore-init-module-imports --recursive .

      - name: Check code style (black)
        run: docker run --rm --volume $(pwd)/pyproject.toml:/app/pyproject.toml --env CI=true --entrypoint python ${DOCKER_IMAGE} -m black --config /app/pyproject.toml --check .

      - name: Check code style (flake8)
        run: docker run --rm --volume $(pwd)/.flake8:/app/.flake8 --env CI=true --entrypoint python ${DOCKER_IMAGE} -m flake8 --config /app/.flake8

      - name: Check lint (pylint)
        run: docker run --rm --volume $(pwd)/pyproject.toml:/app/pyproject.toml --env CI=true --entrypoint python ${DOCKER_IMAGE} -m pylint --rcfile /app/pyproject.toml http_exceptions tests

      - name: Check typing (mypy)
        run: docker run --rm --volume $(pwd)/pyproject.toml:/app/pyproject.toml --env CI=true --entrypoint python ${DOCKER_IMAGE} -m mypy --config-file /app/pyproject.toml http_exceptions tests

      - name: Run tests (pytest)
        run: docker run --rm --volume $(pwd)/pyproject.toml:/app/pyproject.toml --env CI=true --entrypoint python ${DOCKER_IMAGE} -m pytest -c /app/pyproject.toml
